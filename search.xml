<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>acme 自动申请证书</title>
      <link href="/2022/02/20/acme-%E8%87%AA%E5%8A%A8%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6/"/>
      <url>/2022/02/20/acme-%E8%87%AA%E5%8A%A8%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="ACME-自动申请及管理证书"><a href="#ACME-自动申请及管理证书" class="headerlink" title="ACME 自动申请及管理证书"></a>ACME 自动申请及管理证书</h1><h2 id="安装acme-sh"><a href="#安装acme-sh" class="headerlink" title="安装acme.sh"></a>安装acme.sh</h2><p>执行以下命令，acme.sh 会安装到 ~/.acme.sh 目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh</span><br><span class="line">% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                               Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   671  100   671    0     0    680      0 --:--:-- --:--:-- --:--:--   679</span><br><span class="line">% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                               Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  112k  100  112k    0     0   690k      0 --:--:-- --:--:-- --:--:--  693k</span><br><span class="line">[Fri 30 Dec 01:03:32 GMT 2016] Installing from online archive.</span><br><span class="line">[Fri 30 Dec 01:03:32 GMT 2016] Downloading https://github.com/Neilpang/acme.sh/archive/master.tar.gz</span><br><span class="line">[Fri 30 Dec 01:03:33 GMT 2016] Extracting master.tar.gz</span><br><span class="line">[Fri 30 Dec 01:03:33 GMT 2016] Installing to /home/user/.acme.sh</span><br><span class="line">[Fri 30 Dec 01:03:33 GMT 2016] Installed to /home/user/.acme.sh/acme.sh</span><br><span class="line">[Fri 30 Dec 01:03:33 GMT 2016] Installing <span class="built_in">alias</span> to <span class="string">'/home/user/.profile'</span></span><br><span class="line">[Fri 30 Dec 01:03:33 GMT 2016] OK, Close and reopen your terminal to start using acme.sh</span><br><span class="line">[Fri 30 Dec 01:03:33 GMT 2016] Installing cron job</span><br><span class="line">no crontab <span class="keyword">for</span> user</span><br><span class="line">no crontab <span class="keyword">for</span> user</span><br><span class="line">[Fri 30 Dec 01:03:33 GMT 2016] Good, bash is found, so change the shebang to use bash as preferred.</span><br><span class="line">[Fri 30 Dec 01:03:33 GMT 2016] OK</span><br><span class="line">[Fri 30 Dec 01:03:33 GMT 2016] Install success!</span><br></pre></td></tr></table></figure><p>安装成功后执行 source ~/.bashrc 以确保脚本所设置的命令别名生效。</p><p>如果安装报错，那么可能是因为系统缺少 acme.sh 所需要的依赖项，acme.sh 的依赖项主要是 netcat(nc)，我们通过以下命令来安装这些依赖项，然后重新安装一遍 acme.sh:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt -y install netcat socat</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="使用-acme-sh-生成证书及更新"><a href="#使用-acme-sh-生成证书及更新" class="headerlink" title="使用 acme.sh 生成证书及更新"></a>使用 acme.sh 生成证书及更新</h2><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p>执行以下命令生成证书：</p><p>以下的命令会临时监听 80 端口，请确保执行该命令前 80 端口没有使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.acme.sh/acme.sh --issue -d mydomain.me --standalone -k ec-256</span><br></pre></td></tr></table></figure><p><code>-k</code> 表示密钥长度，后面的值可以是 ec-256 、ec-384、2048、3072、4096、8192，带有 ec 表示生成的是 ECC 证书，没有则是 RSA 证书。在安全性上 256 位的 ECC 证书等同于 3072 位的 RSA 证书。</p><h3 id="证书更新"><a href="#证书更新" class="headerlink" title="证书更新"></a>证书更新</h3><p>证书更新<br>由于 Let’s Encrypt 的证书有效期只有 3 个月，因此需要 90 天至少要更新一次证书，acme.sh 脚本会每 60 天自动更新证书。也可以手动更新。</p><p>手动更新 ECC 证书，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.acme.sh/acme.sh --renew -d mydomain.com --force --ecc</span><br></pre></td></tr></table></figure><p>如果是 RSA 证书则执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.acme.sh/acme.sh --renew -d mydomain.com --force</span><br></pre></td></tr></table></figure><h2 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h2><p>ECC 证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.acme.sh/acme.sh --installcert -d mydomain.me --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --ecc</span><br></pre></td></tr></table></figure><p>RSA 证书<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.acme.sh/acme.sh --installcert -d mydomain.me --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key</span><br></pre></td></tr></table></figure><br>注意：无论什么情况，密钥(即上面的v2ray.key)都不能泄漏，如果你不幸泄漏了密钥，可以使用 acme.sh 将原证书吊销，再生成新的证书，吊销方法请自行参考 acme.sh 的手册</p><p>如果更新完证书后需要自动重启服务，则需添加<code>--reloadcmd  &quot;nginx -s reload&quot;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.acme.sh/acme.sh --installcert -d mydomain.me --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --ecc --reloadcmd <span class="string">"service xxx restart"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> tls </tag>
            
            <tag> ecc </tag>
            
            <tag> auto renew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eth rpc 搭建</title>
      <link href="/2020/07/28/eth-rpc-%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/07/28/eth-rpc-%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="同步-rpc"><a href="#同步-rpc" class="headerlink" title="同步 + rpc"></a>同步 + rpc</h1><ul><li><p>http</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir /mnt/eth/data --rpc --rpcaddr 0.0.0.0 --rpcport 28545 --rpcapi personal???db,eth,net,web3</span><br></pre></td></tr></table></figure></li><li><p>ws</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir ./geth-data --dev --ws --ws.port 13334 --ws.api eth,net,web3,miner,personal --verbosity 3</span><br></pre></td></tr></table></figure></li></ul><p><code>--dev</code> 开发模式<br><code>--allow-insecure-unlock</code> 允许本地解锁，线上需关闭<br><code>--verbosity 3</code> 日志等级 默认3</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth attach ./geth-data/geth.ipc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.accounts // 查看账户</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.accounts[0] // 查看特定钱包地址</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.getBalance(eth.accounts[0]) // 查询eth 余额</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.sendTransaction(&#123;from: eth.accounts[0] , to: eth.accounts[1], value: web3.toWei(10, <span class="string">"ether"</span>)&#125;) // 转账</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.blockNumber // 查询区块高度</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> personal.newAccount(<span class="string">"password"</span>) //创建用户</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> miner.start() //开始当前用户挖矿</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> miner.stop() //停止当前用户挖矿</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.getTransaction(<span class="string">"txid"</span>) // 根据txID查询交易</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.getTransactionReceipt(<span class="string">"txid"</span>) //根据txID 查询交易结果</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> personal.unlockAccount(eth.accounts[1]) // 解锁用户</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gitea + drone 群晖搭建</title>
      <link href="/2020/06/01/gitea-drone-%E7%BE%A4%E6%99%96%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/06/01/gitea-drone-%E7%BE%A4%E6%99%96%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>近日将DS214play 淘汰换成 DS216+ii，终于可以docker愉快的玩耍</p><p>这里选用数据库用PostgreSql,Drone 的原话是<a href="https://docs.drone.io/server/storage/database/" target="_blank" rel="noopener">推荐使用</a>PostgreSql。</p><blockquote><p>We strongly recommend using postgres instead of mysql. The system has been optimized for features not found in mysql.</p></blockquote><p>所以，这里我们gitea同样也使用 Postgres 一个数据库搞定</p><a id="more"></a><h1 id="Postgres"><a href="#Postgres" class="headerlink" title="Postgres"></a>Postgres</h1><p>这里我们注意将Postgres 的数据库做一个持久化存储，链接到本机<br>/XX/XX    /var/lib/postgresql/data</p><p>以及设置环境变量POSTGRES_PASSWORD 和端口绑定<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name postgres -e POSTGRES_PASSWORD=&#123;yourpassword&#125; -v &#123;/XX/XX(本地路径)&#125;:/var/lib/postgresql/data -d -p &#123;yourport&#125;:5432 postgres</span><br></pre></td></tr></table></figure></p><p>创建好后。创建gitea和drone使用的数据库（如果不闲麻烦，可以再为这两个数据库创建对应的用户）。</p><h1 id="gitea"><a href="#gitea" class="headerlink" title="gitea"></a>gitea</h1><p>这里要注意的东西不多。docker配置的时候注意自己所对应的端口号,并且将对应数据仓库做一个持久化存储<br>/XX/XX    /data</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=gitea -p &#123;ssh-port&#125;:22 -p &#123;http-port&#125;:3000 -v &#123;/XX/XX&#125;:/data gitea/gitea</span><br></pre></td></tr></table></figure><p>创建完成后，属于对应的http 即可启动<br>进入设置页面后。数据库选择postgres,这里注意数据库的地址,可以填docker网关，172.17.0.1</p><p>对应然后填写自己对应的域名，端口。端口部分除了内部服务的3000不用改，其他的端口均需改成docker对应映射的端口号</p><p>附上app.ini配置文件<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">APP_NAME</span> = Gitea: Git with a cup of tea</span><br><span class="line"><span class="attr">RUN_MODE</span> = prod</span><br><span class="line"><span class="attr">RUN_USER</span> = git</span><br><span class="line"></span><br><span class="line"><span class="section">[repository]</span></span><br><span class="line"><span class="attr">ROOT</span> = /data/git/repositories</span><br><span class="line"></span><br><span class="line"><span class="section">[repository.local]</span></span><br><span class="line"><span class="attr">LOCAL_COPY_PATH</span> = /data/gitea/tmp/local-repo</span><br><span class="line"></span><br><span class="line"><span class="section">[repository.upload]</span></span><br><span class="line"><span class="attr">TEMP_PATH</span> = /data/gitea/uploads</span><br><span class="line"></span><br><span class="line"><span class="section">[server]</span></span><br><span class="line"><span class="attr">APP_DATA_PATH</span>    = /data/gitea</span><br><span class="line"><span class="attr">DOMAIN</span>           = &#123;域名&#125;</span><br><span class="line"><span class="attr">SSH_DOMAIN</span>       = &#123;域名&#125;</span><br><span class="line"><span class="attr">HTTP_PORT</span>        = <span class="number">3000</span></span><br><span class="line"><span class="attr">ROOT_URL</span>         = http://&#123;域名&#125;:&#123;http-port&#125;/</span><br><span class="line"><span class="attr">DISABLE_SSH</span>      = <span class="literal">false</span></span><br><span class="line"><span class="attr">SSH_PORT</span>         = &#123;ssh-port&#125;</span><br><span class="line"><span class="attr">SSH_LISTEN_PORT</span>  = <span class="number">22</span></span><br><span class="line"><span class="attr">LFS_START_SERVER</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">LFS_CONTENT_PATH</span> = /data/git/lfs</span><br><span class="line"><span class="attr">LFS_JWT_SECRET</span>   = &#123;XXXXX&#125;</span><br><span class="line"><span class="attr">OFFLINE_MODE</span>     = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">PATH</span>     = /data/gitea/gitea.db</span><br><span class="line"><span class="attr">DB_TYPE</span>  = postgres</span><br><span class="line"><span class="attr">HOST</span>     = &#123;HOST&#125;:&#123;PORT&#125;</span><br><span class="line"><span class="attr">NAME</span>     = &#123;DATABASE_NAME&#125;</span><br><span class="line"><span class="attr">USER</span>     = &#123;user&#125;</span><br><span class="line"><span class="attr">PASSWD</span>   = &#123;password&#125;</span><br><span class="line"><span class="attr">SCHEMA</span>   = </span><br><span class="line"><span class="attr">SSL_MODE</span> = disable</span><br><span class="line"><span class="attr">CHARSET</span>  = utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[indexer]</span></span><br><span class="line"><span class="attr">ISSUE_INDEXER_PATH</span> = /data/gitea/indexers/issues.bleve</span><br><span class="line"></span><br><span class="line"><span class="section">[session]</span></span><br><span class="line"><span class="attr">PROVIDER_CONFIG</span> = /data/gitea/sessions</span><br><span class="line"><span class="attr">PROVIDER</span>        = file</span><br><span class="line"></span><br><span class="line"><span class="section">[picture]</span></span><br><span class="line"><span class="attr">AVATAR_UPLOAD_PATH</span>            = /data/gitea/avatars</span><br><span class="line"><span class="attr">REPOSITORY_AVATAR_UPLOAD_PATH</span> = /data/gitea/repo-avatars</span><br><span class="line"><span class="attr">DISABLE_GRAVATAR</span>              = <span class="literal">false</span></span><br><span class="line"><span class="attr">ENABLE_FEDERATED_AVATAR</span>       = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[attachment]</span></span><br><span class="line"><span class="attr">ENABLED</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">PATH</span> = /data/gitea/attachments</span><br><span class="line"><span class="attr">ALLOWED_TYPES</span> = */*</span><br><span class="line"><span class="attr">MAX_SIZE</span> = <span class="number">100</span></span><br><span class="line"><span class="attr">MAX_FILES</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="section">[log]</span></span><br><span class="line"><span class="attr">ROOT_PATH</span> = /data/gitea/log</span><br><span class="line"><span class="attr">MODE</span>      = file</span><br><span class="line"><span class="attr">LEVEL</span>     = info</span><br><span class="line"></span><br><span class="line"><span class="section">[security]</span></span><br><span class="line"><span class="attr">INSTALL_LOCK</span>   = <span class="literal">true</span></span><br><span class="line"><span class="attr">SECRET_KEY</span>     = &#123;XXXX&#125;</span><br><span class="line"><span class="attr">INTERNAL_TOKEN</span> = &#123;XXXX&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">[service]</span></span><br><span class="line"><span class="attr">DISABLE_REGISTRATION</span>              = <span class="literal">true</span></span><br><span class="line"><span class="attr">REQUIRE_SIGNIN_VIEW</span>               = <span class="literal">true</span></span><br><span class="line"><span class="attr">REGISTER_EMAIL_CONFIRM</span>            = <span class="literal">false</span></span><br><span class="line"><span class="attr">ENABLE_NOTIFY_MAIL</span>                = <span class="literal">true</span></span><br><span class="line"><span class="attr">ALLOW_ONLY_EXTERNAL_REGISTRATION</span>  = <span class="literal">false</span></span><br><span class="line"><span class="attr">ENABLE_CAPTCHA</span>                    = <span class="literal">false</span></span><br><span class="line"><span class="attr">DEFAULT_KEEP_EMAIL_PRIVATE</span>        = <span class="literal">false</span></span><br><span class="line"><span class="attr">DEFAULT_ALLOW_CREATE_ORGANIZATION</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">DEFAULT_ENABLE_TIMETRACKING</span>       = <span class="literal">true</span></span><br><span class="line"><span class="attr">NO_REPLY_ADDRESS</span>                  = noreply.localhost</span><br><span class="line"></span><br><span class="line"><span class="section">[oauth2]</span></span><br><span class="line"><span class="attr">JWT_SECRET</span> = &#123;XXXXX&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">[mailer]</span></span><br><span class="line"><span class="attr">ENABLED</span>        = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[openid]</span></span><br><span class="line"><span class="attr">ENABLE_OPENID_SIGNIN</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">ENABLE_OPENID_SIGNUP</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h1 id="drone"><a href="#drone" class="headerlink" title="drone"></a>drone</h1><h2 id="drone-server"><a href="#drone-server" class="headerlink" title="drone server"></a>drone server</h2><p>首先在gitea -&gt; 头像 -&gt; 设置 -&gt; 应用 -&gt; OAuth2 中添加应用<br>设置回调 http://{HOST}:{PORT}/login<br>拿到client_id, secret_key</p><p>配置<br>DRONE_GITEA_CLIENT_ID<br>DRONE_GITEA_CLIENT_SECRET<br>DRONE_GITEA_SERVER {gitea 登陆路径}<br>DRONE_RPC_SECRET {RPC_SECRET}<br>DRONE_SERVER_PROTO http<br>DRONE_SERVER_PORT :80<br>DRONE_SERVER_HOST {server_host}:{server_port}<br>DRONE_DATABASE_DRIVER postgres<br>DRONE_DATABASE_DATASOURCE postgres://{user_name}:{password}@{addr}:{port}/{database}?sslmode=disable</p><h2 id="drone-runner"><a href="#drone-runner" class="headerlink" title="drone runner"></a>drone runner</h2><p>runner 可以分开部署到其他机器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  -e DRONE_RPC_PROTO=http \</span><br><span class="line">  -e DRONE_RPC_HOST=&#123;server_host&#125;:&#123;server_port&#125; \</span><br><span class="line">  -e DRONE_RPC_SECRET=&#123;RPC_SECRET&#125; \</span><br><span class="line">  -e DRONE_RUNNER_CAPACITY=2 \</span><br><span class="line">  -e DRONE_RUNNER_NAME=<span class="variable">$&#123;HOSTNAME&#125;</span> \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  --restart always \</span><br><span class="line">  --name runner \</span><br><span class="line">  drone/agent</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> drone </tag>
            
            <tag> 群晖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 操作</title>
      <link href="/2019/09/17/mysql-%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/09/17/mysql-%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="dump-数据库"><a href="#dump-数据库" class="headerlink" title="dump 数据库"></a>dump 数据库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u[user] -p[password] [db] [filePath]</span><br></pre></td></tr></table></figure><h1 id="复制数据库"><a href="#复制数据库" class="headerlink" title="复制数据库"></a>复制数据库</h1><p>本地复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u[user] -p[password] [db] | mysql -h127.0.0.1 -u[user] -p[password] [db]</span><br></pre></td></tr></table></figure><p>本地中转 复制到远程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh [root]@[ip] <span class="string">"mysqldump -u[user] -p[password] [db]"</span> | ssh -C [root]@[ip] <span class="string">"mysql -h127.0.0.1 -u[user] -p[password] [db]"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 搭建测试Mysql Mongo</title>
      <link href="/2019/06/25/docker-%E6%90%AD%E5%BB%BA%E6%B5%8B%E8%AF%95Mysql-Mongo/"/>
      <url>/2019/06/25/docker-%E6%90%AD%E5%BB%BA%E6%B5%8B%E8%AF%95Mysql-Mongo/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><p>值得注意的是,外部主机的IP地址是172.17.0.1, 限定IP地址登陆的时候要放行这个IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name mariadb  -e MYSQL_ROOT_PASSWORD=123456 -v ~/xxx/mariadb:/var/lib/mysql -p 127.0.0.1:3306:3306 mariadb</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="mongo"><a href="#mongo" class="headerlink" title="mongo"></a>mongo</h1><p>首先，配置好文件 Yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mongod.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for documentation of all options, see:</span></span><br><span class="line"><span class="comment">#   http://docs.mongodb.org/manual/reference/configuration-options/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Where and how to store data.</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">/data/db</span></span><br><span class="line">  <span class="attr">journal:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#  engine:</span></span><br><span class="line"><span class="comment">#  mmapv1:</span></span><br><span class="line"><span class="comment">#  wiredTiger:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># where to write logging data.</span></span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/var/log/mongodb/mongod.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># network interfaces</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># how the process runs</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">  <span class="attr">timeZoneInfo:</span> <span class="string">/usr/share/zoneinfo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">authorization:</span> <span class="string">enabled</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#operationProfiling:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#replication:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sharding:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Enterprise-Only Options:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#auditLog:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#snmp:</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always --name mongo -v ~/xxx/mongodb/config:/etc/mongo -v ~/xxx/mongodb/db:/data/db -p 27017:27017 -d mongo -f /etc/mongo/mongod.conf</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it mongo mongo</span><br></pre></td></tr></table></figure><p>设置admin 权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user: <span class="string">'admin'</span>,</span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">'admin'</span>,</span><br><span class="line">    roles: [&#123;role: <span class="string">'userAdminAnyDatabase'</span>, db: <span class="string">'admin'</span>&#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>新建数据库和用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use newDb</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user: <span class="string">'user'</span>,</span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">'123456'</span>,</span><br><span class="line">    roles: [&#123;role: <span class="string">'dbOwner'</span>, db: <span class="string">'userDb'</span>&#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
            <tag> mongo </tag>
            
            <tag> mariadb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh 升级ed25519</title>
      <link href="/2019/05/18/ssh-%E5%8D%87%E7%BA%A7ed25519/"/>
      <url>/2019/05/18/ssh-%E5%8D%87%E7%BA%A7ed25519/</url>
      
        <content type="html"><![CDATA[<h1 id="ssh-升级ed25519"><a href="#ssh-升级ed25519" class="headerlink" title="ssh 升级ed25519"></a>ssh 升级ed25519</h1><h2 id="ECC-介绍"><a href="#ECC-介绍" class="headerlink" title="ECC 介绍"></a>ECC 介绍</h2><p><a href="https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54" target="_blank" rel="noopener">参考</a></p><blockquote><p>在ed25519 68位加密的情况下，安全性可以跟RSA 544~3072的长度相当</p></blockquote><p><a href="https://toutyrater.github.io/advanced/tls.html" target="_blank" rel="noopener">参考</a></p><blockquote><p>证书有两种，一种是 ECC 证书（内置公钥是 ECDSA 公钥），一种是 RSA 证书（内置 RSA 公钥）。简单来说，同等长度 ECC 比 RSA 更安全,也就是说在具有同样安全性的情况下，ECC 的密钥长度比 RSA 短得多（加密解密会更快）。但问题是 ECC 的兼容性会差一些，Android 4.x 以下和 Windows XP 不支持。只要您的设备不是非常老的老古董，强烈建议使用 ECC 证书。</p></blockquote><p><strong> 当然重点是ed25519 更快 </strong> </p><a id="more"></a><h2 id="升级操作"><a href="#升级操作" class="headerlink" title="升级操作"></a>升级操作</h2><ol><li><p>首先生成新的密钥公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh-keygen -o -a 128 -t ed25519 -f ~/.ssh/id_ed25519 -C <span class="string">"yourmail@example.com"</span></span><br></pre></td></tr></table></figure></li><li><p>然后修改~/.ssh/config</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    Hostname github.com</span><br><span class="line">    Port 22</span><br><span class="line">    IdentityFile ~/.ssh/id_ed25519</span><br><span class="line">    IdentityFile ~/.ssh/***  <span class="comment"># 此处修改为老密钥，做兼容</span></span><br></pre></td></tr></table></figure></li><li><p>上传新的公钥至服务器或git服务商</p></li><li><p>注意<br>目前测试github、coding都支持,ed25519 是openssh 6.5 才支持的。如果版本不够，请升级下openSSH版本。<br><strong> openSSH 升级请确保自己升级后能进入系统 🐶 </strong></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> rsa </tag>
            
            <tag> ed25519 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux bbr 开启</title>
      <link href="/2019/03/27/linux-bbr-%E5%BC%80%E5%90%AF/"/>
      <url>/2019/03/27/linux-bbr-%E5%BC%80%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="手动开启-BBR"><a href="#手动开启-BBR" class="headerlink" title="手动开启 BBR"></a>手动开启 BBR</h1><p>注意以下命令需要 root 权限，非 root 用户先执行 sudo su - 切换到 root 账户</p><ul><li>运行 uname -r 看看是不是内核 &gt;= 4.9，不是的话请先升级内核</li><li>执行 lsmod | grep bbr，查看 BBR 模块是否启用，如果结果中没有 tcp_bbr 的话就先执行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">modprobe tcp_bbr</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"tcp_bbr"</span> &gt;&gt; /etc/modules-load.d/modules.conf</span><br></pre></td></tr></table></figure></li><li>执行下命令开启设置 TCP 使用 BBR 发包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"net.core.default_qdisc=fq"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_congestion_control=bbr"</span> &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure></li><li>保存生效 sysctl -p</li><li>验证 BBR 是否已经启用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure>如果结果都有bbr, 则证明你的内核已开启bbr</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> bbr </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux内核升级</title>
      <link href="/2019/03/23/linux%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7/"/>
      <url>/2019/03/23/linux%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h2><p><a href="https://www.jianshu.com/p/fdf6bb6c5b9c" target="_blank" rel="noopener">centos 内核升级转载</a></p><h3 id="检查当前-CentOS-系统版本"><a href="#检查当前-CentOS-系统版本" class="headerlink" title="检查当前 CentOS 系统版本"></a>检查当前 CentOS 系统版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/redhat-release</span></span><br><span class="line"></span><br><span class="line">&gt; CentOS Linux release 7.1.1503 (Core)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="检查当前-CentOS-系统内核版本"><a href="#检查当前-CentOS-系统内核版本" class="headerlink" title="检查当前 CentOS 系统内核版本"></a>检查当前 CentOS 系统内核版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uname -sr</span></span><br><span class="line"></span><br><span class="line">&gt; Linux 3.10.0-327.10.1.e17.x86_64</span><br></pre></td></tr></table></figure><p>可以看出当前系统为 CentOS 7.1,系统内核版本为 3.10.</p><h3 id="运行-yum-命令升级"><a href="#运行-yum-命令升级" class="headerlink" title="运行 yum 命令升级"></a>运行 yum 命令升级</h3><p>CentOS 中 update 命令可以一次性更新所有软件到最新版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum clean all</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yum update</span></span><br></pre></td></tr></table></figure><h3 id="重启系统"><a href="#重启系统" class="headerlink" title="重启系统"></a>重启系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reboot</span></span><br></pre></td></tr></table></figure><h3 id="检查当前-CentOS-系统版本-1"><a href="#检查当前-CentOS-系统版本-1" class="headerlink" title="检查当前 CentOS 系统版本"></a>检查当前 CentOS 系统版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/redhat-release</span></span><br><span class="line"></span><br><span class="line">&gt; CentOS Linux release 7.3.1611 (Core)</span><br></pre></td></tr></table></figure><h3 id="检查当前-CentOS-系统内核版本-1"><a href="#检查当前-CentOS-系统内核版本-1" class="headerlink" title="检查当前 CentOS 系统内核版本"></a>检查当前 CentOS 系统内核版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uname -sr</span></span><br><span class="line"></span><br><span class="line">&gt; Linux 3.10.0-327.10.1.e17.x86_64</span><br></pre></td></tr></table></figure><p>可以看到当前系统为 CentOS 7.3 已经升级成功了,但系统内核版本依旧为 3.10 并没有升级,这是因为 CentOS 为了安全和稳定并不会把系统内核升级到最新的版本,所以 yum update 命令只会升级系统版本和更新软件.接下来我们就来升级系统内核.<br>升级 CentOS 7.× 内核,启用 ELRepo<br>大多数现代发行版提供了一种使用 yum 等包管理系统和官方支持的仓库升级内核的方法。<br>但是，这只会升级内核到仓库中可用的最新版本,而不是在 The Linux Kernel Archives 中可用的最新主线稳定内核.不幸的是, Red Hat 只允许使用 yum 升级内核.与 Red Hat 不同，CentOS 允许使用 ELRepo,这是一个第三方仓库,可以将内核升级到最新主线稳定内核.<br>要在 CentOS 7.× 上启用 ELRepo 仓库,请运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span></span><br></pre></td></tr></table></figure><p>仓库启用后，你可以使用下面的命令列出可用的系统内核相关包:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum --disablerepo="*" --enablerepo="elrepo-kernel" list available</span></span><br></pre></td></tr></table></figure></p><p>接下来，安装最新的主线稳定内核:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum --enablerepo=elrepo-kernel install kernel-ml</span></span><br></pre></td></tr></table></figure></p><p>由于网络原因,以上操作可能需要不少时间.<br>重启机器，检查当前 CentOS 系统内核版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uname -sr</span></span><br><span class="line"></span><br><span class="line">&gt; Linux 4.12.0-1.el7.elrepo.x86_64</span><br></pre></td></tr></table></figure></p><p>可以看到系统内核已经升级到最新的主线稳定内核.<br>设置 GRUB 默认的内核版本<br>为了让新安装的内核成为默认启动选项，你需要如下修改 GRUB 配置,打开并编辑 /etc/default/grub 并设置 GRUB_DEFAULT=0.意思是 GRUB 初始化页面的第一个内核将作为默认内核.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/default/grub</span></span><br><span class="line"></span><br><span class="line">&gt; GRUB_TIMEOUT=5</span><br><span class="line">&gt; GRUB_DISTRIBUTOR=<span class="string">"<span class="variable">$(sed 's, release .*$,,g' /etc/system-release)</span>"</span></span><br><span class="line">&gt; GRUB_DEFAULT=0</span><br><span class="line">&gt; GRUB_DISABLE_SUBMENU=<span class="literal">true</span></span><br><span class="line">&gt; GRUB_TERMINAL_OUTPUT=<span class="string">"console"</span></span><br><span class="line">&gt; GRUB_CMDLINE_LINUX=<span class="string">"crashkernel=auto console=ttyS0 console=tty0 panic=5"</span></span><br><span class="line">&gt; GRUB_DISABLE_RECOVERY=<span class="string">"true"</span></span><br><span class="line">&gt; GRUB_TERMINAL=<span class="string">"serial console"</span></span><br><span class="line">&gt; GRUB_TERMINAL_OUTPUT=<span class="string">"serial console"</span></span><br><span class="line">&gt; GRUB_SERIAL_COMMAND=<span class="string">"serial --speed=9600 --unit=0 --word=8 --parity=no --stop=1"</span></span><br></pre></td></tr></table></figure></p><p>接下来运行下面的命令来重新创建内核配置.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grub2-mkconfig -o /boot/grub2/grub.cfg</span></span><br></pre></td></tr></table></figure></p><p>重启机器，查看系统当前内核版本,验证最新的内核已作为默认内核<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uname -a</span></span><br><span class="line"></span><br><span class="line">&gt; Linux VM_112_0_centos 4.12.0-1.el7.elrepo.x86_64 <span class="comment">#1 SMP Sun Jul 2 20:38:48 EDT 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure></p><p>删除 CentOS 更新后的旧内核<br>查看系统中全部的内核 RPM 包:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm -qa | grep kernel</span></span><br><span class="line"></span><br><span class="line">&gt; kernel-tools-3.10.0-514.26.2.el7.x86_64</span><br><span class="line">&gt; kernel-devel-3.10.0-514.10.2.el7.x86_64</span><br><span class="line">&gt; kernel-3.10.0-514.26.2.el7.x86_64</span><br><span class="line">&gt; kernel-3.10.0-327.el7.x86_64</span><br><span class="line">&gt; kernel-ml-4.12.0-1.el7.elrepo.x86_64</span><br><span class="line">&gt; kernel-headers-3.10.0-514.26.2.el7.x86_64</span><br><span class="line">&gt; kernel-devel-3.10.0-514.26.2.el7.x86_64</span><br><span class="line">&gt; kernel-tools-libs-3.10.0-514.26.2.el7.x86_64</span><br></pre></td></tr></table></figure></p><p>删除旧内核的 RPM 包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove kernel-tools-3.10.0-514.26.2.el7.x86_64 kernel-devel-3.10.0-514.10.2.el7.x86_64 kernel-3.10.0-514.26.2.el7.x86_64 kernel-3.10.0-327.el7.x86_64 kernel-headers-3.10.0-514.26.2.el7.x86_64 kernel-devel-3.10.0-514.26.2.el7.x86_64 kernel-tools-libs-3.10.0-514.26.2.el7.x86_64</span><br></pre></td></tr></table></figure></p><p>重启系统<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reboot</span></span><br></pre></td></tr></table></figure></p><h2 id="debian"><a href="#debian" class="headerlink" title="debian"></a>debian</h2><h3 id="更新源中添加"><a href="#更新源中添加" class="headerlink" title="更新源中添加"></a>更新源中添加</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/apt/source.list</span><br><span class="line"></span><br><span class="line">deb http://http.debian.net/debian stretch-backports main</span><br><span class="line">deb-src http://http.debian.net/debian stretch-backports main</span><br></pre></td></tr></table></figure><h3 id="搜索-linux-image"><a href="#搜索-linux-image" class="headerlink" title="搜索 linux image"></a>搜索 linux image</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; apt-cache search linux-image</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; apt-get install -t stretch-backports linux-image-amd64</span><br><span class="line">&gt; update-grub</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; apt-get clean</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 内核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cocos flux 架构</title>
      <link href="/2018/06/04/cocos-flux-%E6%9E%B6%E6%9E%84/"/>
      <url>/2018/06/04/cocos-flux-%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>#开个新坑</p><p><img src="https://1024center-1253758339.cos.ap-shanghai.myqcloud.com/img/flux_flow.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> cocos </tag>
            
            <tag> flux </tag>
            
            <tag> cocos js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git hook 环境变量</title>
      <link href="/2018/06/01/git-hook-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2018/06/01/git-hook-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>Docker下安装的gogs</p><h2 id="git-hook-执行时的环境变量"><a href="#git-hook-执行时的环境变量" class="headerlink" title="git hook 执行时的环境变量"></a>git hook 执行时的环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HOSTNAME=gogs-gogs1                                                                                                                                              </span><br><span class="line">TERM=xterm                                                                                                      </span><br><span class="line">USER=git                                                               </span><br><span class="line">GOGS_REPO_CUSTOM_HOOKS_PATH=/data/git/gogs-repositories/user/gitRepo.git/custom_hooks</span><br><span class="line">GOGS_REPO_ID=2                                                                              </span><br><span class="line">GIT_PUSH_OPTION_COUNT=0                                                                                                       </span><br><span class="line">PATH=/usr/libexec/git-core:/usr/libexec/git-core:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin               </span><br><span class="line">PWD=/data/git/gogs-repositories/user/gitRepo.git           </span><br><span class="line">GOGS_REPO_OWNER_NAME=user</span><br><span class="line">GOGS_AUTH_USER_NAME=user</span><br><span class="line">GOGS_REPO_NAME=gitRepo</span><br><span class="line">SHLVL=4                                                                                                </span><br><span class="line">HOME=/data/git                                                                        </span><br><span class="line">SSH_ORIGINAL_COMMAND=1                                                                </span><br><span class="line">GOGS_AUTH_USER_ID=1                                                                   </span><br><span class="line">GOGS_AUTH_USER_EMAIL=xxxx@mail.com</span><br><span class="line">GOGS_CUSTOM=/data/gogs                                                                                             </span><br><span class="line">GOGS_REPO_OWNER_SALT_MD5=94d5344c25db5ceaea76fff71f44dd51</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="打印环境变量"><a href="#打印环境变量" class="headerlink" title="打印环境变量"></a>打印环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">unset</span> GIT_DIR</span><br><span class="line">env</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Docker 搭建V2Ray</title>
      <link href="/2018/06/01/%E7%94%A8Docker-%E6%90%AD%E5%BB%BAV2Ray/"/>
      <url>/2018/06/01/%E7%94%A8Docker-%E6%90%AD%E5%BB%BAV2Ray/</url>
      
        <content type="html"><![CDATA[<p>docker 运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name v2ray -v /path/v2ray:/etc/v2ray -p 7777:1080 v2ray/official v2ray -config=/etc/v2ray/config.json</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>config.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"inbound"</span>: &#123;</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">1080</span>, <span class="comment">// 监听端口</span></span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"socks"</span>, <span class="comment">// 入口协议为 SOCKS 5</span></span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"auth"</span>: <span class="string">"noauth"</span>  <span class="comment">//socks的认证设置，noauth 代表不认证，由于 socks 通常在客户端使用，所以这里不认证</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"outbound"</span>: &#123;</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>, <span class="comment">// 出口协议</span></span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"vnext"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"address"</span>: <span class="string">"your.server.com"</span>, <span class="comment">// 服务器地址，请修改为你自己的服务器 ip 或域名</span></span><br><span class="line">          <span class="attr">"port"</span>: <span class="number">2000</span>,  <span class="comment">// 服务器端口</span></span><br><span class="line">          <span class="attr">"users"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"id"</span>: <span class="string">"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"</span>,  <span class="comment">// 用户 ID，必须与服务器端配置相同</span></span><br><span class="line">              <span class="attr">"alterId"</span>: <span class="number">64</span> <span class="comment">// 此处的值也应当与服务器相同</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面的 7777 可以换成自己的本地端口，如果只限本地使用可以换成127.0.0.1:7777</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> v2ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python笔记</title>
      <link href="/2017/06/05/python%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/06/05/python%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="序列类型"><a href="#序列类型" class="headerlink" title="序列类型"></a>序列类型</h1><p>6种：列表、元组、字符串、Unicode字符串、buffer对象、xrange对象</p><h2 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h2><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"a"</span> + <span class="string">"b"</span> <span class="comment"># &gt;&gt;&gt; ab</span></span><br><span class="line"></span><br><span class="line"><span class="string">"ab"</span> * <span class="number">2</span> <span class="comment"># &gt;&gt;&gt; abab</span></span><br><span class="line">[<span class="literal">None</span>] * <span class="number">10</span> <span class="comment"># &gt;&gt;&gt; [None, None, None ... None]</span></span><br><span class="line"></span><br><span class="line"><span class="string">"p"</span> <span class="keyword">in</span> <span class="string">"python"</span> <span class="comment"># 检测是否包含 return Ture or False</span></span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line">len(numbers) <span class="comment"># 3</span></span><br><span class="line">max(numbers) <span class="comment"># 5</span></span><br><span class="line">min(numbers) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">list(<span class="string">"Hello"</span>) <span class="comment"># ["H", "e", "l", "l", "o"]</span></span><br><span class="line"></span><br><span class="line">numbers[<span class="number">1</span>] = <span class="number">20</span> <span class="comment"># 赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> numbers[<span class="number">0</span>] <span class="comment"># 删除首个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分片操作</span></span><br><span class="line">data[start:end:interval]</span><br><span class="line"><span class="comment"># start：起始位置（省略代表开始） end：结束位置（省略代表到结束） interval：步长（不为0，正数从左到有，负数从又到左）</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">numbers[<span class="number">1</span>: <span class="number">4</span>] = [] <span class="comment"># numbers 值为 [1, 5]</span></span><br><span class="line"></span><br><span class="line">numbers.append(<span class="number">2</span>) <span class="comment"># numbers 值为 [1, 5, 2]</span></span><br><span class="line"></span><br><span class="line">numbers.count(<span class="number">1</span>) <span class="comment"># 统计参数在数组中出现次数</span></span><br><span class="line"></span><br><span class="line">numbers.extend([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) <span class="comment"># numbers 值为[1, 5, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">numbers.index(<span class="number">3</span>) <span class="comment"># 查找元素位置</span></span><br><span class="line">numbers.pop(<span class="number">0</span>) <span class="comment"># 弹出首个值(修改了原数组)</span></span><br><span class="line">numbers.reverse() <span class="comment"># 反转列表</span></span><br><span class="line">numbers.sort() <span class="comment"># 排序</span></span><br></pre></td></tr></table></figure><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>不可修改<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">a = (<span class="number">1</span>, )</span><br><span class="line">a = tuple([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># a 为 (1, 2, 3)</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>skynet基础</title>
      <link href="/2017/05/16/skynet%E5%9F%BA%E7%A1%80/"/>
      <url>/2017/05/16/skynet%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Skynet-基础笔记"><a href="#Skynet-基础笔记" class="headerlink" title="Skynet 基础笔记"></a><a href="https://github.com/cloudwu/skynet/wiki" target="_blank" rel="noopener">Skynet 基础笔记</a></h1><p>方便自己查询</p><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a><a href="https://github.com/cloudwu/skynet/wiki/Config" target="_blank" rel="noopener">Config</a></h2><p>启动 skynet 服务器需要提供一个配置文件，配置文件的编写可以参考 examples/config ，下面是一个简单的配置文件范例：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root = <span class="string">"./"</span></span><br><span class="line">thread = <span class="number">8</span></span><br><span class="line">logger = <span class="literal">nil</span></span><br><span class="line">harbor = <span class="number">1</span></span><br><span class="line">address = <span class="string">"127.0.0.1:2526"</span></span><br><span class="line">master = <span class="string">"127.0.0.1:2013"</span></span><br><span class="line">start = <span class="string">"main"</span><span class="comment">-- main script</span></span><br><span class="line">bootstrap = <span class="string">"snlua bootstrap"</span><span class="comment">-- The service for bootstrap</span></span><br><span class="line">standalone = <span class="string">"0.0.0.0:2013"</span></span><br><span class="line">luaservice = root..<span class="string">"service/?.lua;"</span>..root..<span class="string">"test/?.lua;"</span>..root..<span class="string">"examples/?.lua"</span></span><br><span class="line">lualoader = <span class="string">"lualib/loader.lua"</span></span><br><span class="line">snax = root..<span class="string">"examples/?.lua;"</span>..root..<span class="string">"test/?.lua"</span></span><br><span class="line"><span class="built_in">cpath</span> = root..<span class="string">"cservice/?.so"</span></span><br></pre></td></tr></table></figure><br>这个配置文件实际上就是一段 lua 代码，通常，我们以 key = value 的形式对配置项赋值。skynet 在启动时，会读取里面必要的配置项，并将暂时用不到的配置项以字符串形式保存在 skynet 内部的 env 表中。这些配置项可以通过 skynet.getenv 获取。<br>必要的配置项有：</p><ul><li>thread 启动多少个工作线程。通常不要将它配置超过你实际拥有的 CPU 核心数。</li><li>bootstrap skynet 启动的第一个服务以及其启动参数。默认配置为 snlua bootstrap ，即启动一个名为 bootstrap 的 lua 服务。通常指的是 service/bootstrap.lua 这段代码。</li><li>cpath 用 C 编写的服务模块的位置，通常指 cservice 下那些 .so 文件。如果你的系统的动态库不是以 .so 为后缀，需要做相应的修改。这个路径可以配置多项，以 ; 分割。<a id="more"></a></li></ul><h2 id="DataCenter"><a href="#DataCenter" class="headerlink" title="DataCenter"></a><a href="https://github.com/cloudwu/skynet/wiki/DataCenter" target="_blank" rel="noopener">DataCenter</a></h2><p>datacenter 类似一个全网络共享的注册表。它是一个树结构，任何人都可以向其中写入一些合法的 lua 数据，其它服务可以从中取出来。所以你可以把一些需要跨节点访问的服务，自己把其地址记在 datacenter 中，需要的人可以读出。<br>datacenter 是一个 lua 库，使用：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> datacenter = <span class="built_in">require</span> <span class="string">"datacenter"</span></span><br><span class="line"></span><br><span class="line">datacenter.set(key1, key2, ... , value) <span class="comment">--  可以向 key1.key2 设置一个值 value 。这个 api 至少需要两个参数，没有特别限制树结构的层级数。</span></span><br><span class="line">datacenter.get(key1, key2, ...) <span class="comment">-- 从 key1.key2 读一个值。这个 api 至少需要一个参数，如果传入多个参数，则用来读出树的一个分支。</span></span><br><span class="line">datacenter.wait(key1, key2, ...) <span class="comment">--  同 get 方法，但如果读取的分支为 nil 时，这个函数会阻塞，直到有人更新这个分支才返回。当读写次序不确定，但你需要读到其它地方写入的数据后再做后续事情时，用它比循环尝试读取要好的多。wait 必须作用于一个叶节点，不能等待一个分支。</span></span><br></pre></td></tr></table></figure></p><h2 id="UniqueService"><a href="#UniqueService" class="headerlink" title="UniqueService"></a><a href="https://github.com/cloudwu/skynet/wiki/UniqueService" target="_blank" rel="noopener">UniqueService</a></h2><p>我们可以通过 skynet.newservice 启动一个 lua 编写的服务。同一段脚本可以启动多份，每个有不同的地址。地址是区分不同服务的唯一标识。<br>但有时，整个系统中解决一类事务只需要一个服务，在系统启动时，它便启动好，而其它服务需要知道它的地址以便于使用它。这个时候，使用 skynet.uniqueservice 是更好的选择。<br>skynet.uniqueservice 和 skynet.newservice 的输入参数相同，都可以以一个脚本名称找到一段 lua 脚本并启动它，返回这个服务的地址。但和 newservice 不同，每个名字的脚本在同一个 skynet 节点只会启动一次。如果已有同名服务启动或启动中，后调用的人获得的是前一次启动的服务的地址。<br>很多skynet 库都附带有一个独立服务，你可以在库的初始化时，写上类似的语句：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> SERVICE</span><br><span class="line">skynet.init(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">  SERVICE = skynet.uniqueservice <span class="string">"foobar"</span></span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><br>这个范例会注册一个初始化函数去初始化 SERVICE 变量。而你的库函数就可以使用 SERVICE 这个地址来访问对应的唯一的 foobar 服务了。<br>和 DataCenter 不同，uniqueservice 是一个专用于服务管理的模块。它在服务地址管理上做了特别的优化。因为对于同一个名字，只允许启动一次，且不准更换。所以，在实现上，我们可以在每个节点缓存查询过的结果，而不必每次都去中心节点查询。</p><h2 id="LuaAPI"><a href="#LuaAPI" class="headerlink" title="LuaAPI"></a><a href="https://github.com/cloudwu/skynet/wiki/LuaAPI" target="_blank" rel="noopener">LuaAPI</a></h2><p>skynet 提供了一个叫做 skynet 的 lua 模块提供给 snlua 服务承载的 Lua 脚本使用。你只需要编写一个后缀为 .lua 的脚本文件，把文件名作为启动参数，启动 snlua 即可。（关于脚本路径的配置，见 Config）<br>通常，你需要在脚本的第一行写上：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> skynet = <span class="built_in">require</span> <span class="string">"skynet"</span></span><br></pre></td></tr></table></figure><br>注：skynet 这个模块不能在 skynet 框架之外使用，所以你用标准的 lua 解析器运行包含了 skynet 模块的代码会立即出错。这是因为，每个 skynet 服务都依赖一个 skynet_context 的 C 对象，它是由 snlua 导入到 lua 虚拟机中的。<br>每个 skynet 服务，最重要的职责就是处理别的服务发送过来的消息，以及向别的服务发送消息。每条 skynet 消息由五个元素构成。</p><ol><li>session ：大部分消息工作在请求回应模式下。即，一个服务向另一个服务发起一个请求，而后收到请求的服务在处理完请求消息后，回复一条消息。session 是由发起请求的服务生成的，对它自己唯一的消息标识。回应方在回应时，将 session 带回。这样发送方才能识别出哪条消息是针对哪条的回应。session 是一个非负整数，当一条消息不需要回应时，按惯例，使用 0 这个特殊的 session 号。session 由 skynet 框架生成管理，通常不需要使用者关心。</li><li>source ：消息源。每个服务都由一个 32bit 整数标识。这个整数可以看成是服务在 skynet 系统中的地址。即使在服务退出后，新启动的服务通常也不会使用已用过的地址（除非发生回绕，但一般间隔时间非常长）。每条收到的消息都携带有 source ，方便在回应的时候可以指定地址。但地址的管理通常由框架完成，用户不用关心。</li><li>type ：消息类别。每个服务可以接收 256 种不同类别的消息。每种类别可以有不同的消息编码格式。有十几种类别是框架保留的，通常也不建议用户定义新的消息类别。因为用户完全可以利用已有的类别，而用具体的消息内容来区分每条具体的含义。框架把这些 type 映射为字符串便于记忆。最常用的消息类别名为 “lua” 广泛用于用 lua 编写的 skynet 服务间的通讯。</li><li>messsage ：消息的 C 指针，在 Lua 层看来是一个 lightuserdata 。框架会隐藏这个细节，最终用户处理的是经过解码过的 lua 对象。只有极少情况，你才需要在 lua 层直接操作这个指针。</li><li>size ：消息的长度。通常和 message 一起结合起来使用。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> skynet </tag>
            
            <tag> game server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏战斗系统设计</title>
      <link href="/2017/04/14/%E6%B8%B8%E6%88%8F%E6%88%98%E6%96%97%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2017/04/14/%E6%B8%B8%E6%88%8F%E6%88%98%E6%96%97%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="总体"><a href="#总体" class="headerlink" title="总体"></a>总体</h1><ul><li>游戏管理类<ul><li>时间步进器</li><li>操作类</li><li>战斗记录类</li></ul></li><li>战斗包含类<ul><li>场景</li><li>军士</li><li>技能(Buff)</li></ul></li></ul><a id="more"></a><h1 id="游戏管理类"><a href="#游戏管理类" class="headerlink" title="游戏管理类"></a>游戏管理类</h1><h2 id="时间步进器"><a href="#时间步进器" class="headerlink" title="时间步进器"></a>时间步进器</h2><p>用于推进整个游戏的进行,按时间间隔推进整个游戏进行,刷新场景类状态,传输每一次的时间刷新间隔</p><h2 id="操作类"><a href="#操作类" class="headerlink" title="操作类"></a>操作类</h2><p>用于整个战斗的输入系统</p><h2 id="战斗记录类"><a href="#战斗记录类" class="headerlink" title="战斗记录类"></a>战斗记录类</h2><p>将战斗系统进行打谱记录,用于战斗播报和战斗校验</p><h1 id="战斗包含类"><a href="#战斗包含类" class="headerlink" title="战斗包含类"></a>战斗包含类</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>战斗场景类,包含战斗坐标系统,管理军士类</p><p>接口部分</p><ul><li>施放</li><li>移动</li><li>刷新技能状态</li></ul><h2 id="军士"><a href="#军士" class="headerlink" title="军士"></a>军士</h2><p>军士类,包含属性,拥有技能组,Buff组,表现管理,移动速度等<br>此处将场景上所有物体设计成军士,包括障碍(拥有血量,无敌的军士)</p><p>接口部分</p><ul><li>状态刷新</li></ul><h2 id="技能-Buff"><a href="#技能-Buff" class="headerlink" title="技能(Buff)"></a>技能(Buff)</h2><p>技能系统,包含技能效果,技能持续时间,表现时间,释放距离,伤害类型<br>将所有技能,普攻等一切与伤害相关的整合成Buff效果</p><p>接口部分</p><ul><li>施放(施放目标, 命中目标)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 战斗 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏框架探索</title>
      <link href="/2017/04/05/%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6%E6%8E%A2%E7%B4%A2/"/>
      <url>/2017/04/05/%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6%E6%8E%A2%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ul><li>Event<br>所有对象都能通过Event管理器抛出事件。Event对象应包含有Class对象本身、所绑定的事件名、以及具体的回掉。</li><li>EventSet<br>管理所有的Event事件，通过Event所监听的Key值以及优先级，去调用Event事件。</li><li>BaseClass<br>此类应为所有类的基类，具有通过EventSet单例绑定绑定以及解绑事件的基础方法。</li></ul><a id="more"></a><h1 id="整体分层"><a href="#整体分层" class="headerlink" title="整体分层"></a>整体分层</h1><p>以下所有类都继承自BaseClass，受事件管理影响。方便进行数据传输以及消息回掉。</p><h2 id="UI层"><a href="#UI层" class="headerlink" title="UI层"></a>UI层</h2><p>优先级从上至下大致分为</p><ul><li>Error Tip<br>   特殊弹窗管理层</li><li>Tip<br>   普通弹窗管理层</li><li>Module<br>   功能模块层中，应分为Push和Replace两种情况去兼容业务<ul><li>Push 为从当前界面层叠关系</li><li>Replace 为清除当前UI栈</li></ul></li><li>Scene<br>   永不释放，在最底层</li></ul><p>在此层总最好兼顾到产品埋点的需求。</p><h2 id="核心玩法层"><a href="#核心玩法层" class="headerlink" title="核心玩法层"></a>核心玩法层</h2><p>此功能独立游戏UI外，需视情况处理与UI层的关系</p><h2 id="逻辑层"><a href="#逻辑层" class="headerlink" title="逻辑层"></a>逻辑层</h2><p>游戏中数据处理以及保存的地方</p><h2 id="通信层"><a href="#通信层" class="headerlink" title="通信层"></a>通信层</h2><p>与服务端通信的中间件，此功能主要用于收发消息以及收到消息后抛事件给需要用到此消息的UI和逻辑层处理。</p><h1 id="前期注意"><a href="#前期注意" class="headerlink" title="前期注意"></a>前期注意</h1><ul><li>所有读表字段通过专门函数去读取<br>  此项主要是为以后多语言化的东西留坑做准备，避免在战略需要时程序面临大量改动。</li><li>一些唯一Key值的集中管理<br>  主要避免Key值的重复导致出奇怪问题。</li><li>客户端本地逻辑和业务逻辑的拆离<br>  此项主要主要是为了实现亮点<ul><li>在服务端与客户端用相同语言开发的情况下提供逻辑的复用</li><li>为逻辑部分的单元测试提供可能性</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 框架 </tag>
            
            <tag> Lua </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git note</title>
      <link href="/2017/02/05/git-note/"/>
      <url>/2017/02/05/git-note/</url>
      
        <content type="html"><![CDATA[<h1 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h1><h2 id="使用git作为svn的版本管理工具"><a href="#使用git作为svn的版本管理工具" class="headerlink" title="使用git作为svn的版本管理工具"></a>使用git作为svn的版本管理工具</h2><h3 id="从svn地址获取clone仓库"><a href="#从svn地址获取clone仓库" class="headerlink" title="从svn地址获取clone仓库"></a>从svn地址获取clone仓库</h3><p>使用 git clone [svn仓库地址]<br>ps:如果不需要把svn所有文件修改记录down下来可以添加-r HEAD 参数再最后面，这样可以只clone下来最新的文件</p><h3 id="获取更新"><a href="#获取更新" class="headerlink" title="获取更新"></a>获取更新</h3><p>使用 git svn fetch</p><h3 id="合并远程分支代码到本地分枝"><a href="#合并远程分支代码到本地分枝" class="headerlink" title="合并远程分支代码到本地分枝"></a>合并远程分支代码到本地分枝</h3><p>使用 git svn rebase<br>ps: 其实当使用这个命令的时候git会自动从svn取下当前最新代码并合并到当前本地分支，所以无特殊情况使用此命令即可</p><h3 id="提交代码到svn"><a href="#提交代码到svn" class="headerlink" title="提交代码到svn"></a>提交代码到svn</h3><p>使用git svn dcommit<br>此命令会将本地所有提交一一提交到svn仓库，所以提交前最好先整理下本地提交</p><a id="more"></a><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="切换svn地址"><a href="#切换svn地址" class="headerlink" title="切换svn地址"></a>切换svn地址</h2><p><a href="http://bit.ly/2jTvjw3" target="_blank" rel="noopener">参考链接</a></p><ul><li>Edit the svn-remote url URL in .git/config to point to the new domain name</li><li>Run git svn fetch - This needs to fetch at least one new revision from svn!</li><li>Change svn-remote url back to the original url</li><li>Run git svn rebase -l to do a local rebase (with the changes that came in with the last fetch operation)</li><li>Change svn-remote url back to the new url</li><li>Run git svn rebase should now work again!</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 版本管理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE HTML><html><head>  <meta http-equiv="content-type" content="text/html;charset=utf-8;"/>  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />  <meta name="robots" content="all" />  <meta name="robots" content="index,follow"/>  <link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"></head><body>  <script type="text/plain" src="http://www.qq.com/404/search_children.js"          charset="utf-8" homePageUrl="/"          homePageName="回到我的主页">  </script>  <script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"></script>  <script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"></script></body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
